require 'rubygems'
require 'crack'
require 'open-uri'
require 'rest-client'
require 'awesome_print'
require 'benchmark'
require 'resolv'
#require 'google/api-client'

# Parses a list of Drupal core commiters and matches them up with some metadata as hosted on Drupal.org.
# The original intention of this was to allow companies to say "we have 10 of the top 100 Drupal 8 core commiters"", or
# "We have 100 commits in Drupal 8 core.".
#
# This parses the list generated by Eric Duran at https://github.com/ericduran/drupalcores, uses a Google CSE to link
# the usernames to Drupal uids, then parses Drupal.org profile pages to get metadata about the user.
#
# In the future, it might be prudent to import this data into a Drupal 8 install instead of flat files - then we can
# use Views to mash up the data and create an interesting RESTful API.


#url='http://en.wikipedia.org/w/api.php?action=opensearch&search=At&namespace=0'
#commiters_url = 'http://ericduran.github.io/drupalcores/data.json'

# Get Eric Duran's list of commiters.
#commit_count=Crack::JSON.parse(RestClient.get(url))

class DrupalUser
  # Base URL for Drupal user profiles.
  DRUPAL_USER_PROFILE_URL = 'https://drupal.org/user/'
  # Google Custom Search Engine ID. See https://www.google.com/cse
  # TODO Create a config file to parse to grab this data, or set it on initialize.
  GOOGLE_CSE_ID = '<snip>'
  # API Key for Google Cloud. See https://code.google.com/apis/console
  GOOGLE_CSE_API_KEY = '<snip>'
  # End point for Google Custom Search REST API.
  GOOGLE_CSE_ENDPOINT = 'https://www.googleapis.com/customsearch/v1'

  def initialize(username)
    @username = username
    @uid = self.get_uid_from_name(@username)
  end

  def username=(newUsername)
     @username = newUsername
  end

  def uid=(newUid)
    @username = newUid
  end

  def profile_url
    return 'https://drupal.org/user/' + @uid
  end


  def get_uid_from_name(name)
    # @todo Keep a static cache of results.
    # Google's public API recommends and IP and referer to mitigate abuse.
    google_url = 'http://ajax.googleapis.com/ajax/services/search/web?v=1.0&q=%s'
    user_search_query = sprintf(google_url, name) + URI.escape(' site:drupal.org')
    google_result = Crack::JSON.parse(RestClient.get(user_search_query, :referer => 'http://camerontod.com'))
    ap google_result
    google_result['responseData']['results'].each do |result|
      match = result['url'].match Regexp.quote('drupal.org/user/') + '(\d+)$'
      return match[1]
    end
  end

  def get_username_map
    # Keep a static cache of username->uid mappings, to avoid looking it up via Google each time.
    @@username_map ||= Hash.new()
  end

  protected
    def get_public_ip
      return Resolv.getaddress('home.camerontod.com')
    end
end

#{commit_count['contributors'].each_pair do |k,v|
#  print k + 'BREAK' + v.to_s + "\n"
#end}

#ap get_profile_url_from_name('xjm')

names = %w(cam8001 chx xjm)
Benchmark.bm(11) do |b|
  b.report('lookup') do
    names.each { |name|
      du = DrupalUser.new(name)
      #puts du.profile_url
    }
  end
end



